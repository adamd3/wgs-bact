nextflow_workflow {

    name "Test workflow: sra/main.nf"
    script "../main.nf"
    workflow "SRA"
    tag "workflows"
    tag "workflows_sra"
    tag "multiqc_mappings_config"
    tag "sra_nf_core_pipeline_atacseq"

    test("Parameters: --nf_core_pipeline atacseq") {

        when {
            workflow {
                """
                input[0] = Channel.from('ERR1160846', 'GSE214215', 'SRR12848126')
                """
            }
            params {
                outdir = "$outputDir"
                nf_core_pipeline = "atacseq"
            }
        }

        then {
            assert workflow.success

            with(workflow.out.samplesheet) {
                assert path(get(0)).readLines().size() == 5
                assert path(get(0)).readLines()*.split(',').collect { it[0] } == ['"sample"', '"ERX1234253"', '"SRX17709227"', '"SRX17709228"', '"SRX9315476"']
                assert path(get(0)).text.contains('Illumina HiSeq 4000')
            }

            with(workflow.out.mappings) {
                assert path(get(0)).readLines().size() == 5
                assert path(get(0)).readLines()*.split(',').collect { it[0] } == ['"sample"', '"ERX1234253"', '"SRX17709227"', '"SRX17709228"', '"SRX9315476"']
                assert path(get(0)).text.contains('Illumina HiSeq 4000')
            }

            with(workflow.out.sample_mappings) {
                assert path(get(0)[0]).md5 == "6d4c3e5137704358474330207f5f2b5c"
            }
        }
    }
}

nextflow_workflow {

    name "Test workflow: sra/main.nf"
    script "../main.nf"
    workflow "SRA"
    
    // Subworkflows
    tag "SRA"

    // Modules
    tag "MULTIQC_MAPPINGS_CONFIG"
    tag "ASPERA_CLI"
    tag "SRA_FASTQ_FTP"
    tag "SRA_IDS_TO_RUNINFO"
    tag "SRA_RUNINFO_TO_FTP"
    tag "SRA_TO_SAMPLESHEET"

    test("Parameters: --nf_core_pipeline atacseq") {

        when {
            workflow {
                """
                input[0] = Channel.from("DRX026011", "ERX1234253", "SRX6725035")
                """
            }
            params {
                outdir = "$outputDir"
                nf_core_pipeline = "atacseq"
            }
        }

        then {
            assert workflow.success

            assertAll(
                {
                    with(workflow.out.samplesheet) {
                        assert path(get(0)).readLines().size() == 4
                        assert path(get(0)).readLines()*.split(',')[0].take(5) == ['"sample"', '"fastq_1"', '"fastq_2"', '"replicate"', '"run_accession"']
                        assert path(get(0)).readLines()*.split(',').collect { it[0] } == ['"sample"', '"DRX026011"', '"ERX1234253"', '"SRX6725035"']
                        assert path(get(0)).text.contains('Illumina HiSeq 2500')
                    }
                },
                {
                    with(workflow.out.mappings) {
                        assert path(get(0)).readLines().size() == 4
                        assert path(get(0)).readLines()*.split(',').collect { it[0] } == ['"sample"', '"DRX026011"', '"ERX1234253"', '"SRX6725035"']
                        assert path(get(0)).text.contains('Illumina HiSeq 2500')
                    }
                },
                {
                    with(workflow.out.sample_mappings) {
                        assert path(get(0)[0]).md5 == "1ac06bb95b503703430e74660bbdd768"
                    }
                }
            )
        }
    }
}
